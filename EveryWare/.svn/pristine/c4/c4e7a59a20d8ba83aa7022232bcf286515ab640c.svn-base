<?xml version="1.0" encoding="UTF-8"?>
<!-- 이 문서는 mybatis에서 처리할 SQL문을 작성하는 문서입니다. -->
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0/EN"
	"https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- <mapper>태그의 namespace속성은 Java소스에서 실행할 SQL문을 호출할 때 같이 사용되는 이름이다. -->
<mapper namespace="doc">
	 <!-- 동적쿼리 -->
	 <sql id="searchCondition">
	 		<where>
					<choose>
	           <when test="!(sDateFrom == '' or sDateTo == '')">
	               d.doc_date BETWEEN #{sDateFrom} AND #{sDateTo}
	           </when>
	           <otherwise>
	               AND 1=1
	           </otherwise>
	        </choose>
	        <choose>
	           <when test="sStateType != ''">
	               AND d.doc_state = #{sStateType}
	           </when>
	           <otherwise>
	               AND 1=1
	           </otherwise> 
	        </choose>
			    <choose>
			        <when test="!(stype=='' or sword=='')">
			            <if test="stype=='doc_title'">
			                AND d.${stype} like '%${sword}%'
			            </if>
			            <if test="stype=='emp_name'">
			                AND d.emp_name like '%${sword}%'
			            </if>
			            <if test="stype=='dept_name'">
			                AND d.dept_name like '%${sword}%'
			            </if>
			        </when>
			         <otherwise>
			            and 1=1
			        </otherwise>
			    </choose>
			</where>
	 </sql>

	<!-- resultMap 시작 -->
	<resultMap type="docVo" id="docMap">
		<result column="rnum" property="rnum"/>
		<result column="doc_id" property="doc_id"/>
		<result column="doc_id" property="doc_id"/>
		<result column="doc_no" property="doc_no"/>
		<result column="emp_id" property="emp_id"/>
		<result column="emp_name" property="emp_name"/>
		<result column="doc_date" property="doc_date"/>
		<result column="aprv_date" property="aprv_date"/>
		<result column="doc_title" property="doc_title"/>
		<result column="doc_content" property="doc_content"/>
		<result column="doc_state" property="doc_state"/>
		<result column="my_state" property="my_state"/>
		<result column="is_scrap" property="is_scrap"/>
		<collection column="doc_id = doc_id" property="files"  javaType="java.util.List" 
	                            ofType="fileVo" select="selectFiles"></collection>
		<collection column="doc_id = doc_id" property="approvals"  javaType="java.util.List" 
	                            ofType="aprvVo" select="selectApprovals"></collection>
		<collection column="doc_id = doc_id" property="recipients"  javaType="java.util.List" 
	                            ofType="recVo" select="selectRecipients"></collection>
	</resultMap>
	<select id="selectFiles" resultType="fileVo">
		select * from doc_files where doc_id = #{doc_id}
	</select>
	<select id="selectApprovals" resultType="aprvVo">
		select a.doc_id, a.emp_id, v.emp_name as emp_name, v.dept_name as dept_name,
					 a.aprv_order, a.aprv_state, v.position_name as position_name,
			     nvl2(aprv_date, to_char(aprv_date, 'yyyy-mm-dd'), '-') as aprv_date,
			     nvl(aprv_note, ' ') as aprv_note
		from approval a
		inner join v_emp v
		on a.emp_id = v.emp_id
		where doc_id = #{doc_id}
		order by aprv_order desc
	</select>
	<select id="selectRecipients" resultType="recVo">
		select dept_id, (select code_name from codes where code=r.dept_id) as dept_name from recipients r where doc_id = #{doc_id}
	</select>
	<!-- resultMap 끝 -->
	
	<!-- 결재상태 where절 추가!!!!!!!!!!!!!!!!!!! -->
	<!-- 수신문서함 페이지별 리스트 -->
	  <select id="selectReceivedByPage" parameterType="Map" resultMap="docMap">
  	 	select A.*
	 		from (select rownum as rnum, B.*
	 						from (select doc_id, emp_id, emp_name,
	 												 doc_no,
					 									to_char(doc_date, 'yyyy-mm-dd') as doc_date,
					 									nvl2(aprv_date, to_char(aprv_date, 'yyyy-mm-dd'), '-') as aprv_date,
				                    doc_title, doc_content, doc_state, doc_reject
			                from v_documents d
											<include refid="searchCondition"></include>
			                and rec_dept_id = #{empVo.dept_id}		 
			                and aprv_date is not null
			                and is_temp = 0
											order by doc_id desc) B
   		<![CDATA[
      			where rownum <= #{end}) A 
   		where A.rnum >= #{start}
  		]]>
	 </select>
	 
	 	<!-- 수신문서함 전체글 개수 구하기 -->
		<select id="receivedTotalCount" resultType="int" parameterType="map">
		 		select count(*)
				from v_documents d
				<include refid="searchCondition"></include>
				and rec_dept_id = #{dept_id}
				and aprv_date is not null
				and is_temp = 0
		</select>
		
		
		<!-- 기안문서함 페이지별 리스트 -->
		<select id="selectUploadedByPage" parameterType="Map" resultMap="docMap">
		    select A.*
		    from (
		        select rownum as rnum, B.*
		        from (
		            select doc_id, nvl2(doc_no, doc_no, '-') as doc_no, emp_id,
		            			 (select emp_name from employees where emp_id = d.emp_id) as emp_name,
		            			 to_char(doc_date, 'yyyy-mm-dd') as doc_date,
		            			nvl2(aprv_date, to_char(aprv_date, 'yyyy-mm-dd'), '-') as aprv_date,
		            			doc_title, doc_state, doc_reject
								from documents d
		            <include refid="searchCondition"></include>
		            and emp_id = #{empVo.emp_id}
		            and is_temp = 0
		            order by doc_id desc
		        ) B
				<![CDATA[
		        where rownum <= #{end}
		    ) A 
		    where A.rnum >= #{start}
		    ]]>
		</select>
	 
	 	<!-- 기안문서함 전체글 개수 구하기 -->
		<select id="uploadedTotalCount" resultType="int" parameterType="map">
		 		select count(*)
				from documents d
				<include refid="searchCondition"></include>
				and emp_id = #{emp_id}
				and is_temp = 0
		</select>
		
		<!-- 결재문서함 페이지별 리스트 -->
		<select id="selectApproveByPage" parameterType="Map" resultMap="docMap">
		    select A.*
		    from (
		        select rownum as rnum, B.*
		        from (
		            select d.doc_id, nvl2(d.doc_no, d.doc_no, '-') as doc_no, d.emp_id,
				         				(select emp_name from v_emp where emp_id = d.emp_id) as emp_name, 
								        (select dept_name from v_emp where emp_id = d.emp_id) as dept_name, 
								        nvl2(d.doc_date, to_char(d.doc_date, 'yyyy-mm-dd'), '-') as doc_date, 
								        d.doc_title, d.doc_state,
								        nvl2(d.aprv_date, to_char(d.aprv_date, 'yyyy-mm-dd'), '-') as aprv_date
								from documents d
								inner join approval a
								on d.doc_id=a.doc_id
		            <include refid="searchCondition"></include>
		            and a.emp_id = #{empVo.emp_id}
		            and is_temp = 0
		            order by d.doc_id desc
		        ) B
				<![CDATA[
		        where rownum <= #{end}
		    ) A 
		    where A.rnum >= #{start}
		    ]]>
		</select>
	 
	 	<!-- 결재문서함 전체글 개수 구하기 -->
		<select id="approveTotalCount" resultType="int" parameterType="map">
		 		select count(*) from approval a
		 		inner join documents d
		 		on d.doc_id = a.doc_id
				<include refid="searchCondition"></include>
				and a.emp_id = #{emp_id}
				and is_temp = 0
		</select>
		
		<!-- 보관문서함 페이지별 리스트 -->
		<select id="selectScrapByPage" parameterType="Map" resultMap="docMap">
		    select A.*
		    from (
		        select rownum as rnum, B.*
		        from (
		            select d.doc_id, d.doc_no, d.emp_id,
							         (select emp_name from v_emp where emp_id = d.emp_id) as emp_name, 
							        (select dept_name from v_emp where emp_id = d.emp_id) as dept_name, 
							        nvl2(d.doc_date, to_char(d.doc_date, 'yyyy-mm-dd'), '-') as doc_date,
							        nvl2(d.aprv_date, to_char(d.aprv_date, 'yyyy-mm-dd'), '-') as aprv_date,
							        d.doc_title, d.doc_state
									from documents d
									inner join scrap_doc s
									on d.doc_id=s.doc_id
		            <include refid="searchCondition"></include>
		            and s.emp_id = #{empVo.emp_id}
		            and is_temp = 0
		            order by d.doc_id desc
		        ) B
				<![CDATA[
		        where rownum <= #{end}
		    ) A 
		    where A.rnum >= #{start}
		    ]]>
		</select>
	 
	 	<!-- 보관문서함 전체글 개수 구하기 -->
		<select id="scrapTotalCount" resultType="int" parameterType="map">
		 		select count(*) from scrap_doc s
		 		inner join documents d
		 		on s.doc_id = d.doc_id
				<include refid="searchCondition"></include>
				and s.emp_id = #{emp_id}
				and is_temp = 0
		</select>
		
		<!-- 임시저장문서 전체 개수 구하기 -->
		<select id="tempTotalCount" parameterType="string" resultType="int">
				select count(*) from documents
				where emp_id = #{emp_id}
				and is_temp = 1
		</select>
		
		<!-- 임시저장문서 리스트 -->
		<select id="selectTempList" parameterType="string" resultType="docVo">
				select doc_id, to_char(doc_date, 'yyyy-mm-dd') as doc_date, doc_title
				from documents
				where emp_id = #{emp_id}
				and is_temp = 1
		</select>


	<!-- 문서 작성 -->
	<insert id="insertDoc" parameterType="docVo">
		insert all
		into documents(doc_id, emp_id, doc_date, doc_title, doc_content, is_temp)
		values(doc_seq.nextval, #{emp_id}, sysdate, #{doc_title}, #{doc_content}, #{is_temp})
		<foreach collection="approvals" item="aprvVo">
			into approval(doc_id, emp_id, aprv_order)
			values(doc_seq.currval, #{aprvVo.emp_id}, #{aprvVo.aprv_order})
		</foreach>
		<foreach collection="recipients" item="recVo">
			into recipients
			values(doc_seq.currval, #{recVo.dept_id})
		</foreach>
		<if test="files != null">
			<foreach collection="files" item="fileVo">
				into doc_files
				values(#{fileVo.file_path}, doc_seq.currval, #{fileVo.file_name}, #{fileVo.file_size})
			</foreach>
	 	</if>
	 	select * from dual
	</insert>
	
	<!-- 한 개의 문서 조회 -->
	<select id="selectDoc" parameterType="map" resultMap="docMap">
			select doc_id, doc_no, emp_id,
						 (select emp_name from employees where emp_id = d.emp_id) as emp_name,
						 to_char(doc_date, 'yyyy-mm-dd') as doc_date,
						 nvl2(aprv_date, to_char(aprv_date, 'yyyy-mm-dd'), ' ') as aprv_date,
						 doc_title, doc_content, doc_state, doc_reject,
						 (select aprv_state from approval where doc_id=#{doc_id} and emp_id=#{emp_id}) as my_state,
             (select count(*) from scrap_doc where doc_id=#{doc_id} and emp_id=#{emp_id}) as is_scrap
			from documents d where doc_id = #{doc_id}
	</select>
	
	<!-- 해당 문서가 본인의 결재순서인지 확인(1, 0) -->
	<select id="isMyApprovalTurn" parameterType="map" resultType="int">
			select count(*) from approval
			where doc_id = #{doc_id}
			and aprv_order = (select max(aprv_order) from approval
			                    where doc_id = #{doc_id}
			                    and aprv_state = '진행중')
			and emp_id = #{emp_id}
	</select>
	
	<!-- 결재처리 -->
	<update id="approval" parameterType="map">
			update approval
			set aprv_state = '결재', aprv_date = sysdate, aprv_note = #{aprv_note}
			where doc_id = #{doc_id}
			and emp_id = #{emp_id}
	</update>
	
	<!-- 남은 결재자 유무 확인 -->
	<select id="isFinalApproval" parameterType="string" resultType="int">
			select count(*) from approval
			where doc_id = #{doc_id}
			and aprv_state = '진행중'
	</select>
	
	<!-- 최종 결재완료 처리 -->
	<update id="finalApproval"  parameterType="map">
			update documents
			set aprv_date = sysdate,
			doc_state = '결재',
			doc_no = CONCAT('2023-${dept_name}-', LPAD(docno_${dept_name}_seq.nextval, 4, '0'))
			where doc_id = #{doc_id}
	</update>
	
	<!-- URL추가!!!!!!!!!!!!!!!!!!!!!!!!! -->
	<!-- 기안자에게 결재완료 알림 등록 -->
	<insert id="alarmToUploader" parameterType="map">
			insert into alarm
			values(case
                         when (select count(*) from alarm where substr(alarm_id, 1, 8) = to_char(sysdate,'yyyymmdd')) = '0'
                         then to_char(sysdate,'yyyymmdd') || '001'
                         else (select to_char(max(alarm_id)+1) from alarm where substr(alarm_id, 1, 8) = to_char(sysdate,'yyyymmdd')) end, #{emp_id}, #{alarm_type}, 1, sysdate, 'http://localhost/EveryWare/selectDoc.do?id=${doc_id}')
	</insert>
	
	<!-- URL추가!!!!!!!!!!!!!!!!!!!!!!!!! -->
	<!-- 결재순서 도래한 자에게 알림 등록 -->
	<insert id="alarmToApprover" parameterType="string">
			insert into alarm
			values(case
                         when (select count(*) from alarm where substr(alarm_id, 1, 8) = to_char(sysdate,'yyyymmdd')) = '0'
                         then to_char(sysdate,'yyyymmdd') || '001'
                         else (select to_char(max(alarm_id)+1) from alarm where substr(alarm_id, 1, 8) = to_char(sysdate,'yyyymmdd')) end,
				(select emp_id from approval
				  where doc_id = #{doc_id}
				    and aprv_order = (select max(aprv_order) from approval
			                  	     where doc_id = #{doc_id}
			                    	       and aprv_state = '진행중')), 
				'내결재', 1, sysdate, 'http://localhost/EveryWare/selectDoc.do?id=${doc_id}')
	</insert>
	
	<!-- 반려처리 -->
	<update id="reject" parameterType="map">
			update approval
			set aprv_state = '반려', aprv_date = sysdate, aprv_note = #{aprv_note}
			where doc_id = #{doc_id}
			and emp_id = #{emp_id}
	</update>
	
	<!-- 반려처리 최종 -->
	<update id="reject2" parameterType="map">
			update documents
			set aprv_date = sysdate, doc_state = '반려', doc_reject = #{doc_reject}
			where doc_id = #{doc_id}
	</update>
	
	<!-- 보관문서함 담기 -->
	<insert id="insertScrap" parameterType="docVo">
			insert into scrap_doc
			values(#{emp_id}, #{doc_id})
	</insert>

	<!-- 보관문서 삭제하기 -->
	<delete id="deleteScrap" parameterType="docVo">
			delete from scrap_doc
			where emp_id = #{emp_id}
			and doc_id = #{doc_id}
	</delete>

</mapper>